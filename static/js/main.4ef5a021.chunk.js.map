{"version":3,"sources":["image/natsu.png","HeroImage.jsx","HeroInfo.jsx","HeroLink.jsx","serviceWorker.js","index.js"],"names":["module","exports","HeroImage","src","heroImage","className","alt","HeroName","HeroBio","HeroWikipedia","GetHyperLink","url","name","HeroFanPage","props","href","target","rel","Boolean","window","location","hostname","match","HeroPage","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,mC,sJCS5BC,MANf,WACE,OACQ,yBAAKC,IAAKC,IAAWC,UAAU,OAAOC,IAAI,oBCH7C,SAASC,IACd,OACQ,8CAIH,SAASC,IACd,OACE,0pBAWE,6BACA,6BAZF,qhCCRG,SAASC,IAEd,OAAO,kBAACC,EAAD,CAAcC,IADT,+CACmBC,KAAM,cAGhC,SAASC,IAEd,OAAO,kBAACH,EAAD,CAAcC,IADT,0GACmBC,KAAM,sBAGvC,SAASF,EAAaI,GACpB,OACE,uBAAGC,KAAMD,EAAMH,IAAKK,OAAO,SAASC,IAAI,uBAAuBH,EAAMF,MCFrDM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVN,SAASC,IACP,OACE,yBAAKlB,UAAU,YACZ,kBAACE,EAAD,MAEH,yBAAKF,UAAU,YACb,kBAAC,EAAD,MACA,kBAACG,EAAD,OAGF,yBAAKH,UAAU,SACb,kBAACI,EAAD,MACA,kBAACI,EAAD,QAONW,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACH,EAAD,OAEFI,SAASC,eAAe,SDoGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4ef5a021.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/natsu.3d1042bd.png\";","import React from 'react';\r\nimport heroImage from './image/natsu.png';\r\n\r\nfunction HeroImage() {\r\n  return (\r\n          <img src={heroImage} className=\"hero\" alt=\"Natsu Dragneel\" />\r\n    );\r\n}\r\n\r\nexport default HeroImage;\r\n","import React from 'react';\r\n\r\nexport function HeroName() {\r\n  return (\r\n          <h1>Natsu Dragneel</h1>\r\n    );\r\n}\r\n\r\nexport function HeroBio() {\r\n  return (\r\n    <p>\r\n      Natsu is a lean, muscular young man of average height with a slightly tan skin tone, \r\n      black eyes, spiky pink-colored hair, and has abnormal sharp canines;\r\n      Natsu has a scar on the right side of his neck, hidden by his scarf.\r\n      Following his intense battle with the Rogue Cheney of the future, \r\n      Natsu gains a cross-shaped scar on the left side of his abdomen, \r\n      a result of the two fatal wounds the man dealt to him during their altercations.\r\n      He later attains a new scar, this one being a jagged blemish on his right cheek, \r\n      which he gained following his battle with Zeref.\r\n      Natsu's guild mark is red and is located just below his right shoulder.\r\n      \r\n      <br></br>\r\n      <br></br>\r\n      \r\n    Natsu's main outfit consists of a sleeveless, gold trimmed, black waistcoat, \r\n    often left open and untucked, exposing his bare chest, a gold trimmed, \r\n    black cloth around his waist that reaches his knees, held by a leather brown belt with an oval-shaped silver buckle, \r\n    white knee-length trousers with black ribbon ties, a thick black wristband on his left wrist,\r\n    black open-toed sandals and the scale-patterned scarf he received from his adoptive father, Igneel.\r\n    He has also been known to wear a rolled up comforter strapped across his back, though he rarely carries it in battle.\r\n\r\n    In the year X791, Natsu's attire receives minor changes. He now wears an open-collared, one-sleeved long overcoat version of his original waistcoat, \r\n    which is instead tucked in and zipped. The sleeve covers Natsu's left arm with a faux leather brown armband, leaving his Fairy Tail mark, \r\n    as well as his entire right arm, consequently exposed. Natsu continues wearing Igneel's scarf and retains the same lower clothing. \r\n    He now wears his wristband on his right wrist.\r\n    </p>\r\n  )\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport function HeroWikipedia() {\r\n  const url = 'https://it.wikipedia.org/wiki/Natsu_Dragonil';\r\n  return <GetHyperLink url={url} name={'Wikipedia'} />\r\n}\r\n\r\nexport function HeroFanPage(){\r\n  const url = 'https://aminoapps.com/c/genesis-portugal/page/item/natsu-dragneel/kwmD_KRghQI7eVMEZ3ZJpE8VaEzob8KxVNzUQ';\r\n  return <GetHyperLink url={url} name={'Fan Page Portugal'} />\r\n}\r\n\r\nfunction GetHyperLink(props){\r\n  return (\r\n    <a href={props.url} target=\"_blank\" rel=\"noopener noreferrer\">{props.name}</a>\r\n  );\r\n}\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport HeroImage from './HeroImage';\r\nimport {HeroName, HeroBio} from './HeroInfo';\r\nimport {HeroWikipedia, HeroFanPage} from './HeroLink';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nfunction HeroPage() {\r\n  return (\r\n    <div className=\"MainBody\">\r\n       <HeroName />\r\n       \r\n    <div className=\"HeroInfo\">\r\n      <HeroImage />\r\n      <HeroBio />\r\n    </div>\r\n\r\n    <div className=\"Links\">\r\n      <HeroWikipedia />\r\n      <HeroFanPage />\r\n    </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HeroPage />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}